name: Windows RDP with LocalXpose + Auto Backup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 350

    env:
      LOCALXPOSE_AUTH_TOKEN: ${{ secrets.LOCALXPOSE_AUTH_TOKEN }}
      LOCALXPOSE_SUBDOMAIN: gamingrdp  # your reserved subdomain here
      FILEBASE_ACCESS_KEY: ${{ secrets.FILEBASE_ACCESS_KEY }}
      FILEBASE_SECRET_KEY: ${{ secrets.FILEBASE_SECRET_KEY }}
      FILEBASE_BUCKET: ${{ secrets.FILEBASE_BUCKET }}
      RDP_USER: runner
      RDP_PASSWORD: MySecyrePass123!

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable Windows RDP & Firewall
        run: |
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes

      - name: Create and configure RDP user
        shell: pwsh
        run: |
          $RDP_USER = "${{ env.RDP_USER }}"
          $RDP_PASSWORD_FULL = "${{ env.RDP_PASSWORD }}"
          $RDP_PASSWORD = $RDP_PASSWORD_FULL.Substring(0, [Math]::Min($RDP_PASSWORD_FULL.Length,14))

          $userExists = Get-LocalUser -Name $RDP_USER -ErrorAction SilentlyContinue

          if (-not $userExists) {
              Write-Host "User $RDP_USER does not exist. Creating user..."
              net user $RDP_USER $RDP_PASSWORD /add
          } else {
              Write-Host "User $RDP_USER already exists. Setting password..."
              net user $RDP_USER $RDP_PASSWORD
          }

          $rdpGroup = Get-LocalGroup | Where-Object { $_.Name -match 'Remote Desktop Users' }

          if ($rdpGroup) {
              Write-Host "Adding user $RDP_USER to group '$($rdpGroup.Name)'"
              Add-LocalGroupMember -Group $rdpGroup.Name -Member $RDP_USER -ErrorAction SilentlyContinue
          } else {
              Write-Host "Remote Desktop Users group not found. Skipping group addition."
          }

      - name: Download LocalXpose
        run: curl -L https://localxpose.io/releases/windows/localxpose.exe -o localxpose.exe

      - name: Login LocalXpose
        run: .\localxpose.exe login --auth-token ${{ secrets.LOCALXPOSE_AUTH_TOKEN }}

      - name: Start LocalXpose Tunnel (background)
        shell: pwsh
        run: Start-Process -NoNewWindow -FilePath .\localxpose.exe -ArgumentList "tunnel tcp --port 3389 --subdomain ${{ env.LOCALXPOSE_SUBDOMAIN }}"

      - name: Save RDP Link to repo
        run: echo "rdp://${{ env.LOCALXPOSE_SUBDOMAIN }}.loclx.io:3389" > links/rdp_link.txt

      - name: Commit and push RDP link
        run: |
          git config --global user.name "Auto Bot"
          git config --global user.email "auto@bot.com"
          git add links/rdp_link.txt
          git commit -m "Updated RDP link $(Get-Date -Format u)" || echo "No changes to commit"
          git push origin main

      - name: Install AWS CLI (for backup)
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.msi" -o "AWSCLIV2.msi"
          msiexec.exe /i AWSCLIV2.msi /quiet

      - name: Restore Backup from Filebase (if exists)
        shell: pwsh
        run: |
          if (Test-Path "C:\backup\data.zip") { Remove-Item "C:\backup\data.zip" -Force }
          New-Item -ItemType Directory -Path C:\backup -Force
          aws --endpoint-url=https://s3.filebase.com s3 cp s3://${{ env.FILEBASE_BUCKET }}/data.zip C:\backup\data.zip || Write-Host "No backup found"
          if (Test-Path "C:\backup\data.zip") {
            Expand-Archive -Path C:\backup\data.zip -DestinationPath C:\data -Force
          }

      - name: Backup Folder Every 30 mins (loop)
        shell: pwsh
        run: |
          while ($true) {
            Compress-Archive -Path C:\data\* -DestinationPath C:\backup\data.zip -Force
            aws --endpoint-url=https://s3.filebase.com s3 cp C:\backup\data.zip s3://${{ env.FILEBASE_BUCKET }}/data.zip
            Start-Sleep -Seconds 1800
          }
